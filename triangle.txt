.data
prompt: .asciiz "Enter the lengths of three sides of the triangle: "
equilateralMsg: .asciiz "The triangle is equilateral.\n"
isoscelesMsg: .asciiz "The triangle is isosceles.\n"
scaleneMsg: .asciiz "The triangle is scalene.\n"
notTriangleMsg: .asciiz "The given sides do not form a triangle.\n"

.text
.globl main

main:
    # Prompt the user to enter the side lengths
    li $v0, 4
    la $a0, prompt
    syscall

    # Read side a
    li $v0, 5
    syscall
    move $t0, $v0  # Move the value to $t0

    # Read side b
    li $v0, 5
    syscall
    move $t1, $v0  # Move the value to $t1

    # Read side c
    li $v0, 5
    syscall
    move $t2, $v0  # Move the value to $t2

    # Check if the sides can form a triangle using the Triangle Inequality Theorem
    add $t3, $t0, $t1  # t3 = a + b
    add $t4, $t0, $t2  # t4 = a + c
    add $t5, $t1, $t2  # t5 = b + c

    # Compare the sum of each pair of sides with the third side
    ble $t3, $t2, not_triangle
    ble $t4, $t1, not_triangle
    ble $t5, $t0, not_triangle

    # Check if all sides are equal
    beq $t0, $t1, side_a_eq_side_b
    j not_equilateral

side_a_eq_side_b:
    beq $t1, $t2, print_equilateral
    j not_equilateral

print_equilateral:
    li $v0, 4
    la $a0, equilateralMsg
    syscall
    j end

not_equilateral:
    # Check if two sides are equal for isosceles
    beq $t0, $t1, print_isosceles
    beq $t1, $t2, print_isosceles
    beq $t0, $t2, print_isosceles
    j print_scalene

print_isosceles:
    li $v0, 4
    la $a0, isoscelesMsg
    syscall
    j end

print_scalene:
    li $v0, 4
    la $a0, scaleneMsg
    syscall
    j end

not_triangle:
    li $v0, 4
    la $a0, notTriangleMsg
    syscall
    j end

end:
    li $v0, 10  # Exit the program
    syscall